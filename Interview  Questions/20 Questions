Q.1    What are lists and tuples? What is the key difference between the two?
Ans                            LIST                                                                          TUPLE
       Lists are mutable                                                               Tuples are immutable
       Implication of iterations is Time-consuming                                     The implication of iterations is comparatively Faster
       The list is better for performing operations, such as insertion and deletion.   Tuple data type is appropriate for accessing the elements
       Lists consume more memory                                                       Tuple consume less memory as compared to the list
       Lists have several built-in methods                                             Tuple does not have many built-in methods.
       The unexpected changes and errors are more likely to occur                      In tuple, it is hard to take place.
   
   
Q.2    What are Keywords in Python?
Ans    Keywords in python are reserved words that have special meaning.They are generally used to define type of variables. 
       Keywords cannot be used for variable or function names. There are following 33 keywords in python-
       
       And        Or       Not       If
       Elif       Else     For       While
       Break      As       Def       Lambda
       Pass       Return   True      False
       Try        With     Assert    Class
       Continue   Del      Except    Raise
       Finally    From     Global    Import
       In         Is       None      Nonlocal
       Yield
   
   
Q.3    What does *args and **kwargs mean?
Ans    We use *args when we aren’t sure how many arguments are going to be passed to a function, or if we want to pass a stored
       list or tuple of arguments to a function. 
       **kwargs is used when we don’t know how many keyword arguments will be passed to a function, or it can be used to pass the
       values of a dictionary as keyword arguments. The identifiers args and kwargs are a convention, you could also use *bob and
       **billy but that would not be wise.
       example:
           
       1-->def print_food(**foods):
           for food in foods.items():
               print(food)
           print_food(Lion="Carnivore", Elephant="Herbivore", Gorilla="Omnivore")
           Output:
           ('Lion', 'Carnivore')
           ('Elephant', 'Herbivore')
           ('Gorilla', 'Omnivore')
           
       2-->def print_animals(*animals):
           for animal in animals:
               print(animal)
           print_animals("Lion", "Elephant", "Wolf", "Gorilla")
           Output:
           Lion
           Elephant
           Wolf
           Gorilla
           
           
Q.4    What is slicing in Python?
Ans    Slicing is used to access parts of sequences like lists, tuples, and strings. The syntax of slicing is-[start:end:step].
       The step can be omitted as well. When we write [start:end] this returns all the elements of the sequence from the start 
       (inclusive) till the end-1 element. If the start or end element is negative i, it means the ith element from the end. 
       The step indicates the jump or how many elements have to be skipped. Eg. if there is a list- [1,2,3,4,5,6,7,8]. Then 
       [-1:2:2] will return elements starting from the last element till the third element by printing every second element
       .i.e. [8,6,4].
       
       
Q.5    What is break, continue and pass in Python?
Ans    Break --> Allows loop termination when some condition is met and the control is transferred to the next statement.
       
       Continue --> Allows skipping some part of a loop when some specific condition is met and the control is transferred 
                    to the beginning of the loop
       Pass --> Used when you need some block of code syntactically, but you want to skip its execution. This is basically a
                null operation. Nothing happens when this is executed.
                
                
Q.6    What is a dictionary in Python
Ans    The built-in datatypes in Python is called dictionary. It defines one-to-one relationship between keys and values.
       Dictionaries contain pair of keys and their corresponding values. Dictionaries are indexed by keys.
       
       Let’s take an example:
       The following example contains some keys. Country, Capital & PM. Their corresponding values are India, Delhi and Modi 
       respectively.
       
       dict={'Country':'India','Capital':'Delhi','PM':'Modi'}
       print dict[Country]
       Output:India
       print dict[Capital]
       Output:Delhi
       print dict[PM]
       Output:Modi   
       
       
Q.7     Difference between instance and static variable
Ans     Static(Class)variable -->When we declare a variable inside a class but outside any method, it is called as class or static 
                                 variable in python. Class or static variable can be referred through a class but not directly through
                                 an instance.
        Instance variable     --> A variable that is defined inside a method and belongs only to the current instance of a class.
        Expample:
                class CSStudent:
                    stream = 'cse'                  # Class Variable
                    def __init__(self,name,roll):
                        self.name = name            # Instance Variable
                        self.roll = roll            # Instance Variable
                  
                # Objects of CSStudent class
                a = CSStudent('Geek', 1)
                b = CSStudent('Nerd', 2)
                  
                print(a.stream)  # prints "cse"
                print(b.stream)  # prints "cse"
                print(a.name)    # prints "Geek"
                print(b.name)    # prints "Nerd"
                print(a.roll)    # prints "1"
                print(b.roll)    # prints "2"
                  
                # Class variables can be accessed using class
                # name also
                print(CSStudent.stream) # prints "cse"
                  
                # Now if we change the stream for just a it won't be changed for b
                a.stream = 'ece'
                print(a.stream) # prints 'ece'
                print(b.stream) # prints 'cse'
                  
                # To change the stream for all instances of the class we can change it 
                # directly from the class
                CSStudent.stream = 'mech'
                  
                print(a.stream) # prints 'ece'
                print(b.stream) # prints 'mech'
                
                Output: 
                cse
                cse
                Geek
                Nerd
                1
                2
                cse
                ece
                cse
                ece
                mech
                
                
Q.8     What are global, protected and private attributes in Python
Ans     Global (also known as public), private, protected attributes are used by a language
        to restrict the access to usage of a class.
        
        In short, public members can be accessed from anywhere in the class, private members can be
        accessed only from within the class and protected members can be accessed only from within the subclass.
        All members are allowed to be accessed from within the class.
        
        1) Public attribute
              All members in a Python class are public by default. Any member can be accessed from
              outside the class environment.
              
              class student:
              def __init__(self, name, id):
              self.name=name
              self.id=id
              
              >>> s1=student(“swapnil”,100)
              >>> s1.id
              100
              
        2) Protected
              Python’s convention to make an instance variable protected is to add a
              prefix _ (single underscore) to it. This effectively prevents it to be accessed,
              unless it is from within a sub-class.
              
              class employee:
              def __init__(self, name, sal):
              self._name=name
              self._salary=sal
              
              >>> e1=employee(“swapnili”, 10000)
              >>> e1._salary
              10000
              
        3) Private attributes
              a double underscore __ prefixed to a variable makes it private.
              You cannot access this variable from outside the class. If tried to access, it will throw
              an AttributeError
              
              class department:
              def __init__(self, name, id):
              self.__name=name # private attribute
              self.__id=id # private attribute
              
              >>> d1=department(“electronicsl”,101)
              >>> d1.__name
              AttributeError: ‘department’ object has no attribute ‘__name’  
              
              
Q.9    What is the use of self in Python
Ans    Self is an instance or an object of a class. In Python, this is explicitly included as the first parameter. However, this is
       not the case in Java where it's optional. It helps to differentiate between the methods and attributes of a class with local 
       variables.
       
       The self-variable in the init method refers to the newly created object while in other methods, it refers to the object whose
       method was called.  
       
       
Q.10   What is type conversion in Python?
Ans    Type conversion refers to the conversion of one data type iinto another.
       int() - converts any data type into integer type
       
       float() - converts any data type into float type
       
       ord() - converts characters into integer
       
       hex() - converts integers to hexadecimal
       
       oct() - converts integer to octal
       
       tuple() - This function is used to convert to a tuple.
       
       set() - This function returns the type after converting to set.
       
       list() - This function is used to convert any data type to a list type.
       
       dict() - This function is used to convert a tuple of order (key,value) into a dictionary.
       
       str() - Used to convert integer into a string.
       
       complex(real,imag) - This functionconverts real numbers to complex(real,imag) number. 
       
       
Q.11   What is the difference between Python Arrays and list
Ans    Arrays and lists, in Python, have the same way of storing data. But, arrays can hold only a single data type elements whereas 
       lists can hold any data type elements.
       
       Example:
       1
       2
       3
       4
       5
       import array as arr
       My_Array=arr.array('i',[1,2,3,4])
       My_list=[1,'abc',1.20]
       print(My_Array)
       print(My_list)
       Output:
       
       array(‘i’, [1, 2, 3, 4]) [1, ‘abc’, 1.2]      
       
       
Q.12   What are functions in Python?
Ans    A function is a block of code which is executed only when it is called. To define a Python function, the def keyword is 
       used.
       
       Example:
       1
       2
       3
       def Newfunc():
       print("Hi, Welcome to Edyoda")
       Newfunc(); #calling the function
       Output: Hi, Welcome to Edyoda      
      
      
Q.13   How are arguments passed by value or by reference in python?
Ans    There are 4 type of arguments in python
       1. Default Argument
       2. keyword Argument
       3. Arbitrary Argument
       4. Required Argument
       
       1-->def print_details(name="Elon Musk", age=50):
           print(f"{name} is {age} years old.")
           print_details("Jeff Bezos", 57)  # Output: Jeff Bezos is 57 years old.
           print_details()  # Line 4- Output: Elon Musk is 50 years old.
           Jeff Bezos is 57 years old.
           Elon Musk is 50 years old.
           
       2--># both keyword arguments
           res = divide_two(a=3, b=12)  
           print(res)  # Output: 0.25  
           # one positional, one keyword argument
           res2 = divide_two(36, b=12)
           print(res2)  # Output: 3
           # both keyword arguments, order changed
           res3 = divide_two(b=12, a=48)
           print(res3)  # Output: 4
           Output:
           0.25
           3.0
           4.0
           
       3-->def print_animals(*animals):
           for animal in animals:
               print(animal)
           print_animals("Lion", "Elephant", "Wolf", "Gorilla")
           output-->lion,elephant,wolf,gorilla
       
       4-->def add_nums(num1, num2=12):
           print(num1 + num2)
           add_nums(num1=11, num2=13)  # Output: 24
            
           # no value for default argument
           add_nums(num1=11)  # Output: 23 
            
           # no value for required argument
           add_nums(num2=13) # Will throw an error
           Output
           24
           23
           
           TypeError: add_nums() missing 1 required positional argument: 'num1'
               add_nums(num2=13) # Will throw an error
           Line 10 in <module> (Solution.py) 
          
          
Q.14   Explain what the zip() function does in Python
Ans    Python zip() function returns a zip object, which maps a similar index of multiple containers. It takes an iterable, convert 
       into iterator and aggregates the elements based on iterables passed. It returns an iterator of tuples.
       Syntax -->zip(iterator1, iterator2, iterator3 ...)   
       
       
Q.15   Can you explain the swapcase() function? What does it do in Python.
Ans    It is a string's function which converts all uppercase characters into lowercase and vice versa. It is used to alter the 
       existing case of the string. This method creates a copy of the string which contains all the characters in the swap case. 
       If the string is in lowercase, it generates a small case string and vice versa. It automatically ignores all the non-alphabetic
       characters. 
       See an example below.
       string = "IT IS IN LOWERCASE."  
       print(string.swapcase())
       Output: it is in lowercase
       
       
Q.16   Explain what the enumerate() function does
Ans    The enumerate() function is used to iterate through the sequence and retrieve the index position and its corresponding value 
       at the same time.
       
       Example:
       s="hello"
       for i,j in enumerate(s):
           print(i,j)
       Output:
           0 h,1 e,2 l,3 l,4 o    
           
           
Q.17    Explain what an operator is.
Ans     An operator is a particular symbol which is used on some values and produces an output as a result. An operator works on 
        operands. Operands are numeric literals or variables which hold some values. Operators can be unary, binary or ternary. 
        An operator which requires a single operand known as a unary operator, which require two operands known as a binary operator 
        and which require three operands is called ternary operator.
        Example:
        # Unary Operator  
        A = 12  
        B = -(A)  
        print (B)  
        # Binary Operator  
        A = 12  
        B = 13  
        print (A + B)  
        print (B * A)  
        #Ternary Operator  
        A = 12  
        B = 13  
        min = A if A < B else B  
            
        print(min) 
        Output: 
        # Unary Operator
        -12
        # Binary Operator
        25
        156
        # Ternary Operator
        12       
        
        
Q.18    Explain help() and dir() functions in Python.
Ans     Help() and dir() both functions are accessible from the Python interpreter and used for viewing a consolidated dump 
        of built-in functions.
        Help() function : The help() function is used to display the documentation string and also facilitates you to see the
                           help related to modules, keywords, attributes, etc.
        Dir() function  : The dir() function is used to display the defined symbols.   
        
        
Q.19    What are local variables and global variables in Python?
Ans     Global Variables:
        Variables declared outside a function or in global space are called global variables. These variables can be accessed by any 
        function in the program.
        
        Local Variables:
        Any variable declared inside a function is known as a local variable. This variable is present in the local space and not in
        the global space.   
        
        
Q.20    What is a lambda function?
Ans     An anonymous function is known as a lambda function. This function can have any number of parameters but, can have just one 
        statement.
        
        Example:
        1
        2
        a = lambda x,y : x+y
        print(a(5, 6))
        Output: 11
